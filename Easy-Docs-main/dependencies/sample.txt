Nearly every computer science student who has been around for a while has heard this fancy term: API. Letâ€™s admit it: weâ€™ve all googled it to try and get an idea of what it is but have mostly returned scratching our heads, bewildered (and somewhat discouraged) by the wordy and vague definitions.
An application programming interface or an API is a computing interface which defines interactions between multiple software intermediaries. It defines the kinds of calls or requests that can be made, how to make them, the data formats that should be used, the conventions to follow, etc.
The role of an API is to facilitate this very communication. But what exactly do we mean by communication? ðŸ¤” Communication here may include requesting some data from or publishing some data to, say, the server of an online service. In addition to this, APIs also perform the task of abstraction of complexity. A developer working on an app that requires weather data does not have to create anything; they just have to just pull the data from a weather API in the desired format without having to worry about how the data was obtained.
APIs are everywhere from smart refrigerators to your own local machine which may need an API to talk to the peripherals, and so on. However, weâ€™re going to focus on the most popular form that it takes today: a web API. A robust and understandable example of this can be highlighted using the Spotify API.
Letâ€™s say you want to build a data repository of the top 15 artists of 2020 by accessing data on which of their songs topped the charts, which ones got the most hits, which ones were shared the most, their fan following numbers and so on. Using the Spotify API, we can request and then import data from their server and arrange it neatly into JSON files (a simplified file format for storing data in human-readable form), which we can then access, explore and operate on however we wish to.
The next natural question is: how do we request this data? Or if we wish to publish or edit data on their servers, how does one do that? Here we come to the second part of this clunky definition. (I hope you keep going back to it and keep trying to connect some of the dots on your own!)
We need a set of conventions and protocols that are followed universally when creating APIs, such that data from any API in the world can be accessed with similar if not the same commands.
And here comes the other buzzword you may have heard of: REST.
REST is nothing but a set architecture or a set of guiding principles by which an API is designed, and consequently by which calls to this API are made. Any API made adhering to the principles and constraints set by the REST convention is called a RESTful API. These constraints are quite lengthy and beyond the scope of this introduction.
However, we can get hands-on trying to make some API requests ourselves, analyze the responses and fix the error messages (but in just a minute)! One of the main principles of the REST architecture is that any data on the server (called a resource) should be accessible through a URI (Uniform Resource Identifier) which is really just another name for URL.
Each URL is called a request and the data sent back is called the response. Before we start making requests, letâ€™s get some things set up and understood.
Any request contains 4 primary parts:
the Endpoint
the Header
the Method
the Body
Endpoint or root-endpoint is the starting point of the API which you are accessing. For example, the root-endpoint of the Spotify API is https://api.spotify.com/. We can then attach paths to the end of this endpoint to request specific resources on their servers.
Headers are used to give some additional information to the server when making requests which may come in handy for it while sorting and sending a response. 